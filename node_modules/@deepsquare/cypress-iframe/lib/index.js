var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
const DEFAULT_OPTS = {
  log: true,
  timeout: 3e4
};
const DEFAULT_IFRAME_SELECTOR = "iframe";
function sleep(timeout) {
  return new Promise((resolve) => setTimeout(resolve, timeout));
}
const frameLoaded = (selector, opts) => {
  if (selector === void 0) {
    selector = DEFAULT_IFRAME_SELECTOR;
  } else if (typeof selector === "object") {
    opts = selector;
    selector = DEFAULT_IFRAME_SELECTOR;
  }
  const fullOpts = __spreadValues(__spreadValues({}, DEFAULT_OPTS), opts);
  const log = fullOpts.log ? Cypress.log({
    name: "frame loaded",
    displayName: "frame loaded",
    message: [selector]
  }).snapshot() : null;
  return cy.get(selector, { log: false }).then({ timeout: fullOpts.timeout }, ($frame) => __async(this, null, function* () {
    log == null ? void 0 : log.set("$el", $frame);
    if ($frame.length !== 1) {
      throw new Error(`cypress-iframe commands can only be applied to exactly one iframe at a time.  Instead found ${$frame.length}`);
    }
    const contentWindow = $frame.prop("contentWindow");
    const hasNavigated = fullOpts.url ? () => {
      var _a;
      return typeof fullOpts.url === "string" ? contentWindow.location.toString().includes(fullOpts.url) : (_a = fullOpts.url) == null ? void 0 : _a.test(contentWindow.location.toString());
    } : () => contentWindow.location.toString() !== "about:blank";
    while (!hasNavigated()) {
      yield sleep(100);
    }
    if (contentWindow.document.readyState === "complete") {
      return $frame;
    }
    const loadLog = Cypress.log({
      name: "Frame Load",
      message: [contentWindow.location.toString()],
      event: true
    }).snapshot();
    yield new Promise((resolve) => {
      Cypress.$(contentWindow).on("load", resolve);
    });
    loadLog.end();
    log == null ? void 0 : log.finish();
    return $frame;
  }));
};
Cypress.Commands.add("frameLoaded", frameLoaded);
const iframe = (selector, opts) => {
  if (selector === void 0) {
    selector = DEFAULT_IFRAME_SELECTOR;
  } else if (typeof selector === "object") {
    opts = selector;
    selector = DEFAULT_IFRAME_SELECTOR;
  }
  const fullOpts = __spreadValues(__spreadValues({}, DEFAULT_OPTS), opts);
  const log = fullOpts.log ? Cypress.log({
    name: "iframe",
    displayName: "iframe",
    message: [selector]
  }).snapshot() : null;
  return cy.frameLoaded(selector, __spreadProps(__spreadValues({}, fullOpts), { log: false })).then(($frame) => {
    log == null ? void 0 : log.set("$el", $frame).end();
    const contentWindow = $frame.prop("contentWindow");
    return Cypress.$(contentWindow.document.body);
  });
};
Cypress.Commands.add("iframe", iframe);
const enter = (selector, opts) => {
  if (selector === void 0) {
    selector = DEFAULT_IFRAME_SELECTOR;
  } else if (typeof selector === "object") {
    opts = selector;
    selector = DEFAULT_IFRAME_SELECTOR;
  }
  const fullOpts = __spreadValues(__spreadValues({}, DEFAULT_OPTS), opts);
  const log = fullOpts.log ? Cypress.log({
    name: "enter",
    displayName: "enter",
    message: [selector]
  }).snapshot() : null;
  return cy.iframe(selector, __spreadProps(__spreadValues({}, fullOpts), { log: false })).then(($body) => {
    log == null ? void 0 : log.set("$el", $body).end();
    return () => cy.wrap($body, { log: false });
  });
};
Cypress.Commands.add("enter", enter);
//# sourceMappingURL=index.js.map
