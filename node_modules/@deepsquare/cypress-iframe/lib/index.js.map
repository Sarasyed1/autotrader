{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["/// <reference path=\"../index.d.ts\" />\n\nconst DEFAULT_OPTS: Cypress.Loggable & Cypress.Timeoutable = {\n  log: true,\n  timeout: 30000,\n};\n\nconst DEFAULT_IFRAME_SELECTOR = 'iframe';\n\nfunction sleep(timeout: number) {\n  return new Promise((resolve) => setTimeout(resolve, timeout));\n}\n\nconst frameLoaded: Cypress.Chainable['frameLoaded'] = (\n  selector?: string | Partial<Cypress.IframeOptions>,\n  opts?: Partial<Cypress.IframeOptions>,\n) => {\n  if (selector === undefined) {\n    selector = DEFAULT_IFRAME_SELECTOR;\n  } else if (typeof selector === 'object') {\n    opts = selector;\n    selector = DEFAULT_IFRAME_SELECTOR;\n  }\n\n  const fullOpts: Cypress.IframeOptions = {\n    ...DEFAULT_OPTS,\n    ...opts,\n  };\n  const log = fullOpts.log\n    ? Cypress.log({\n        name: 'frame loaded',\n        displayName: 'frame loaded',\n        message: [selector],\n      }).snapshot()\n    : null;\n  return cy\n    .get<HTMLIFrameElement>(selector, { log: false })\n    .then({ timeout: fullOpts.timeout }, async ($frame: JQuery<HTMLIFrameElement>) => {\n      log?.set('$el', $frame);\n      if ($frame.length !== 1) {\n        throw new Error(\n          `cypress-iframe commands can only be applied to exactly one iframe at a time.  Instead found ${$frame.length}`,\n        );\n      }\n\n      const contentWindow: Window = $frame.prop('contentWindow');\n      const hasNavigated = fullOpts.url\n        ? () =>\n            typeof fullOpts.url === 'string'\n              ? contentWindow.location.toString().includes(fullOpts.url)\n              : fullOpts.url?.test(contentWindow.location.toString())\n        : () => contentWindow.location.toString() !== 'about:blank';\n\n      while (!hasNavigated()) {\n        await sleep(100);\n      }\n\n      if (contentWindow.document.readyState === 'complete') {\n        return $frame;\n      }\n\n      const loadLog = Cypress.log({\n        name: 'Frame Load',\n        message: [contentWindow.location.toString()],\n        event: true,\n      } as any).snapshot();\n      await new Promise((resolve) => {\n        Cypress.$(contentWindow).on('load', resolve);\n      });\n      loadLog.end();\n      log?.finish();\n      return $frame;\n    });\n};\nCypress.Commands.add('frameLoaded', frameLoaded);\n\nconst iframe: Cypress.Chainable['iframe'] = (\n  selector?: string | Partial<Cypress.IframeOptions>,\n  opts?: Partial<Cypress.IframeOptions>,\n) => {\n  if (selector === undefined) {\n    selector = DEFAULT_IFRAME_SELECTOR;\n  } else if (typeof selector === 'object') {\n    opts = selector;\n    selector = DEFAULT_IFRAME_SELECTOR;\n  }\n\n  const fullOpts: Cypress.IframeOptions = {\n    ...DEFAULT_OPTS,\n    ...opts,\n  };\n  const log = fullOpts.log\n    ? Cypress.log({\n        name: 'iframe',\n        displayName: 'iframe',\n        message: [selector],\n      }).snapshot()\n    : null;\n  return cy.frameLoaded(selector, { ...fullOpts, log: false }).then(($frame) => {\n    log?.set('$el', $frame).end();\n    const contentWindow: Window = $frame.prop('contentWindow');\n    return Cypress.$(contentWindow.document.body as HTMLBodyElement);\n  });\n};\nCypress.Commands.add('iframe', iframe);\n\nconst enter: Cypress.Chainable['enter'] = (\n  selector?: string | Partial<Cypress.IframeOptions>,\n  opts?: Partial<Cypress.IframeOptions>,\n) => {\n  if (selector === undefined) {\n    selector = DEFAULT_IFRAME_SELECTOR;\n  } else if (typeof selector === 'object') {\n    opts = selector;\n    selector = DEFAULT_IFRAME_SELECTOR;\n  }\n\n  const fullOpts: Cypress.IframeOptions = {\n    ...DEFAULT_OPTS,\n    ...opts,\n  };\n\n  const log = fullOpts.log\n    ? Cypress.log({\n        name: 'enter',\n        displayName: 'enter',\n        message: [selector],\n      }).snapshot()\n    : null;\n\n  return cy.iframe(selector, { ...fullOpts, log: false }).then(($body) => {\n    log?.set('$el', $body).end();\n    return () => cy.wrap($body, { log: false });\n  });\n};\n\nCypress.Commands.add('enter', enter);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAM,eAAuD;AAAA,EAC3D,KAAK;AAAA,EACL,SAAS;AAAA;AAGX,MAAM,0BAA0B;AAEhC,eAAe,SAAiB;AAC9B,SAAO,IAAI,QAAQ,CAAC,YAAY,WAAW,SAAS;AAAA;AAGtD,MAAM,cAAgD,CACpD,UACA,SACG;AACH,MAAI,aAAa,QAAW;AAC1B,eAAW;AAAA,aACF,OAAO,aAAa,UAAU;AACvC,WAAO;AACP,eAAW;AAAA;AAGb,QAAM,WAAkC,kCACnC,eACA;AAEL,QAAM,MAAM,SAAS,MACjB,QAAQ,IAAI;AAAA,IACV,MAAM;AAAA,IACN,aAAa;AAAA,IACb,SAAS,CAAC;AAAA,KACT,aACH;AACJ,SAAO,GACJ,IAAuB,UAAU,EAAE,KAAK,SACxC,KAAK,EAAE,SAAS,SAAS,WAAW,CAAO,WAAsC;AAChF,+BAAK,IAAI,OAAO;AAChB,QAAI,OAAO,WAAW,GAAG;AACvB,YAAM,IAAI,MACR,+FAA+F,OAAO;AAAA;AAI1G,UAAM,gBAAwB,OAAO,KAAK;AAC1C,UAAM,eAAe,SAAS,MAC1B,MAAG;AA/Cb;AAgDY,oBAAO,SAAS,QAAQ,WACpB,cAAc,SAAS,WAAW,SAAS,SAAS,OACpD,eAAS,QAAT,mBAAc,KAAK,cAAc,SAAS;AAAA,QAChD,MAAM,cAAc,SAAS,eAAe;AAEhD,WAAO,CAAC,gBAAgB;AACtB,YAAM,MAAM;AAAA;AAGd,QAAI,cAAc,SAAS,eAAe,YAAY;AACpD,aAAO;AAAA;AAGT,UAAM,UAAU,QAAQ,IAAI;AAAA,MAC1B,MAAM;AAAA,MACN,SAAS,CAAC,cAAc,SAAS;AAAA,MACjC,OAAO;AAAA,OACC;AACV,UAAM,IAAI,QAAQ,CAAC,YAAY;AAC7B,cAAQ,EAAE,eAAe,GAAG,QAAQ;AAAA;AAEtC,YAAQ;AACR,+BAAK;AACL,WAAO;AAAA;AAAA;AAGb,QAAQ,SAAS,IAAI,eAAe;AAEpC,MAAM,SAAsC,CAC1C,UACA,SACG;AACH,MAAI,aAAa,QAAW;AAC1B,eAAW;AAAA,aACF,OAAO,aAAa,UAAU;AACvC,WAAO;AACP,eAAW;AAAA;AAGb,QAAM,WAAkC,kCACnC,eACA;AAEL,QAAM,MAAM,SAAS,MACjB,QAAQ,IAAI;AAAA,IACV,MAAM;AAAA,IACN,aAAa;AAAA,IACb,SAAS,CAAC;AAAA,KACT,aACH;AACJ,SAAO,GAAG,YAAY,UAAU,iCAAK,WAAL,EAAe,KAAK,UAAS,KAAK,CAAC,WAAW;AAC5E,+BAAK,IAAI,OAAO,QAAQ;AACxB,UAAM,gBAAwB,OAAO,KAAK;AAC1C,WAAO,QAAQ,EAAE,cAAc,SAAS;AAAA;AAAA;AAG5C,QAAQ,SAAS,IAAI,UAAU;AAE/B,MAAM,QAAoC,CACxC,UACA,SACG;AACH,MAAI,aAAa,QAAW;AAC1B,eAAW;AAAA,aACF,OAAO,aAAa,UAAU;AACvC,WAAO;AACP,eAAW;AAAA;AAGb,QAAM,WAAkC,kCACnC,eACA;AAGL,QAAM,MAAM,SAAS,MACjB,QAAQ,IAAI;AAAA,IACV,MAAM;AAAA,IACN,aAAa;AAAA,IACb,SAAS,CAAC;AAAA,KACT,aACH;AAEJ,SAAO,GAAG,OAAO,UAAU,iCAAK,WAAL,EAAe,KAAK,UAAS,KAAK,CAAC,UAAU;AACtE,+BAAK,IAAI,OAAO,OAAO;AACvB,WAAO,MAAM,GAAG,KAAK,OAAO,EAAE,KAAK;AAAA;AAAA;AAIvC,QAAQ,SAAS,IAAI,SAAS;",
  "names": []
}
